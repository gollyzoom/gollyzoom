{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SvgComponent","props","react_default","a","createElement","Object","assign","width","height","fill","cx","cy","r","id","patternContentUnits","xlinkHref","transform","App","className","App_SvgComponent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCKlCC,eAAe,SAAAC,GAAK,OACxBC,EAAAC,EAAAC,cAAA,MAAAC,OAAAC,OAAA,CAAKC,MAAO,IAAKC,OAAQ,IAAKC,KAAK,QAAWR,GAC5CC,EAAAC,EAAAC,cAAA,UAAQM,GAAI,IAAKC,GAAI,IAAKC,EAAG,IAAKH,KAAK,YACvCP,EAAAC,EAAAC,cAAA,UAAQM,GAAI,IAAKC,GAAI,IAAKC,EAAG,IAAKH,KAAK,YACvCP,EAAAC,EAAAC,cAAA,UAAQM,GAAI,MAAOC,GAAI,MAAOC,EAAG,MAAOH,KAAK,YAC7CP,EAAAC,EAAAC,cAAA,UAAQM,GAAI,MAAOC,GAAI,MAAOC,EAAG,MAAOH,KAAK,YAC7CP,EAAAC,EAAAC,cAAA,UAAQM,GAAI,MAAOC,GAAI,MAAOC,EAAG,MAAOH,KAAK,2BAC7CP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WACES,GAAG,mBACHC,oBAAoB,oBACpBP,MAAO,EACPC,OAAQ,GAERN,EAAAC,EAAAC,cAAA,OACEW,UAAU,kBACVC,UAAU,qCAGdd,EAAAC,EAAAC,cAAA,SACES,GAAG,iBACHN,MAAO,KACPC,OAAQ,KACRO,UAAU,mBAiBHE,mLATX,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,4CANUgB,aCtBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.acc96be1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst SvgComponent = props => (\n  <svg width={320} height={320} fill=\"none\" {...props}>\n    <circle cx={160} cy={160} r={160} fill=\"#0582CA\" />\n    <circle cx={160} cy={160} r={140} fill=\"#006494\" />\n    <circle cx={160.5} cy={160.5} r={122.5} fill=\"#003554\" />\n    <circle cx={160.5} cy={160.5} r={102.5} fill=\"#C4C4C4\" />\n    <circle cx={160.5} cy={160.5} r={102.5} fill=\"url(#prefix__pattern0)\" />\n    <defs>\n      <pattern\n        id=\"prefix__pattern0\"\n        patternContentUnits=\"objectBoundingBox\"\n        width={1}\n        height={1}\n      >\n        <use\n          xlinkHref=\"#prefix__image0\"\n          transform=\"matrix(.0004 0 0 .0004 0 -.167)\"\n        />\n      </pattern>\n      <image\n        id=\"prefix__image0\"\n        width={2448}\n        height={3264}\n        xlinkHref=\"./face.jpg\"\n      />\n    </defs>\n  </svg>\n)\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SvgComponent></SvgComponent>\n        <h1>Gabrielle Cohn</h1>\n        <h4>CS Student at Stanford</h4>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n/*class Page extends Component {\n  render() {\n    return (\n      <div className=\"Pic\">\n        <img src='profile.jpg'/>\n      </div>\n    );\n  }\n}\n\nReactDom.render(\n    <Page/>, document.getElementById('root')\n);*/\n/*ReactDOM.render(\n    \n  <div className='col-xs-6'>\n    <img src='profile.jpg' />\n  </div>,\n  document.getElementById('root')\n);*/\n\nserviceWorker.unregister();\n"],"sourceRoot":""}